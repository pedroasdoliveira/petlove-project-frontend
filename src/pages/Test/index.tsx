import {
  Box,
  Flex,
  Heading,
  useColorMode,
  useColorModeValue,
  useRadio,
  useRadioGroup,
  HStack,
  FormControl,
  RadioGroup,
  Button,
  Progress,
  Text,
} from "@chakra-ui/react";
import type { NextPage } from "next";
import Head from "next/head";
import * as S from "./style";
import { ToggleMode } from "types/interfaces";
import { useToggle } from "hooks/useToggle";
import { ArrowForwardIcon, SunIcon, MoonIcon } from "@chakra-ui/icons";
import StepsForm from "components/Steps/Steps";

function RadioCard(props: any) {
  const { getInputProps, getCheckboxProps } = useRadio(props);

  const input = getInputProps();
  const checkbox = getCheckboxProps();

  return (
    <Box as="label">
      <input {...input} />
      <Box
        {...checkbox}
        position="relative"
        cursor="pointer"
        h="2px"
        w="2px"
        border={`4px solid ${props.children == "Sim" ? "#87FA34" : "#FD5028"}`}
        borderRadius="100%"
        boxShadow="md"
        _checked={{
          bg: `${props.children == "Sim" ? "#87FA34" : "#FD5028"}`,
          color: "white",
        }}
        p={4}
      >
        <Text
          letterSpacing="3px"
          fontWeight="bold"
          fontSize="lg"
          position="absolute"
          top={0}
          left={props.children == "Sim" ? -12 : 12}
        >
          {props.children}
        </Text>
      </Box>
    </Box>
  );
}

const Test: NextPage = () => {
  const options = ["Sim", "Não"];
  const { toggleColorMode } = useColorMode();
  const { toggle, setToggle } = useToggle() as ToggleMode;
  const { getRootProps, getRadioProps } = useRadioGroup({
    name: "option",
    defaultValue: "none",
  });

  const group = getRootProps();
  const pageBackground = useColorModeValue("#8e6dd1", "#1d1d31");
  const borderStyleNav = useColorModeValue("#fff", "#5030DD");
  const colorButtonSend = useColorModeValue("#8e6dd1", "#fff");
  const buttonSendColorMode = useColorModeValue("#fff", "#5030DD");
  const buttonSendHover = useColorModeValue("#000000", "#fff");
  const buttonColorHover = useColorModeValue("#fff", "#000000");

  return (
    <Flex
      as="section"
      flexDir="column"
      h="100vh"
      maxWidth="2000px"
      bgColor={pageBackground}
      px="50px"
      py="30px"
      justifyContent="space-between"
      position="relative"
    >
      <Head>
        <title>Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="./public/favicon.ico" />
      </Head>

      <StepsForm />

      <Flex flexDir="column" justifyContent="center" alignItems="center">
        <Heading color="#fff" textAlign="center" mb="20px">
          Lidera soluções técnicas com excelência e cria planos de contigência
        </Heading>

        <FormControl
          as="fieldset"
          display="flex"
          alignItems="center"
          flexDir="column"
        >
          <RadioGroup defaultValue="none" mb={5}>
            <HStack color="#fff" spacing="80px" {...group}>
              {options.map((value) => {
                const radio = getRadioProps({ value });
                return (
                  <RadioCard key={value} {...radio}>
                    {value}
                  </RadioCard>
                );
              })}
            </HStack>
          </RadioGroup>
          <Button
            bgColor={buttonSendColorMode}
            color={colorButtonSend}
            letterSpacing="tight"
            _hover={{ background: buttonSendHover, color: buttonColorHover }}
          >
            Next Question <ArrowForwardIcon w={8} h={5} />
          </Button>
        </FormControl>
      </Flex>
      <Progress colorScheme="green" size="sm" value={50} />
      <Button
        position="absolute"
        top="25%"
        onClick={() => {
          toggleColorMode();
          setToggle(!toggle);
        }}
      >
        {toggle ? <SunIcon /> : <MoonIcon />}
      </Button>
    </Flex>
  );
};

export default Test;
